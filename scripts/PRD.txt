# Product Requirements Document (PRD)
# Figgy Communication Interface - Phase 2

## Executive Summary

This PRD outlines the development of a communication interface for Figgy that enables users to submit documents via WhatsApp and Slack. The interface will integrate with Figgy's existing document processing pipeline, allowing users to send PDF files through messaging platforms for automatic ingestion and processing.

## Background and Context

### Current State
- Figgy is a multi-tenant SaaS platform for accounting document processing
- Users currently upload documents through the web interface
- The system automatically classifies, extracts data, and manages suppliers
- File ingestion triggers background jobs for AI-powered extraction

### Business Need
- Enable document submission through popular messaging platforms
- Reduce friction in document upload process
- Support mobile-first workflows
- Maintain security and tenant isolation

## Goals and Objectives

### Primary Goals
1. Enable WhatsApp document submission with secure user verification
2. Support Slack integration for team-based document sharing
3. Create a unified communication interface for future messaging platforms
4. Maintain existing security and multi-tenancy architecture

### Success Metrics
- 80% successful document processing rate from messaging platforms
- <30 seconds from message receipt to file ingestion start
- Zero security breaches or cross-tenant data leaks
- 90% user satisfaction with verification process

## Scope

### In Scope
1. WhatsApp Integration via Twilio
   - Phone number verification system
   - PDF file reception and processing
   - Basic command support (status, help)
   - Group chat support (if technically feasible)

2. Slack Integration
   - OAuth2-based workspace connection
   - Channel-based document submission
   - User mapping to Figgy accounts

3. Communication Interface Service
   - Unified message handling architecture
   - File upload to existing file manager
   - Trigger existing ingestion pipeline
   - Audit logging for compliance

4. Frontend Verification Flow
   - WhatsApp number verification UI
   - Slack workspace connection UI
   - Integration status dashboard

### Out of Scope
- Document extraction improvements
- Additional file format support beyond current capabilities
- Real-time chat functionality
- Custom WhatsApp Business features
- Advanced conversational AI

## Technical Requirements

### Architecture Overview

```
┌─────────────────┐     ┌─────────────────┐
│    WhatsApp     │     │      Slack      │
│   (via Twilio)  │     │   (Slack API)   │
└────────┬────────┘     └────────┬────────┘
         │                       │
         └───────────┬───────────┘
                     │
         ┌───────────▼───────────┐
         │ Communication Interface│
         │      Service           │
         └───────────┬───────────┘
                     │
         ┌───────────▼───────────┐
         │   Message Router       │
         │ - Authentication       │
         │ - Validation           │
         │ - File Processing      │
         └───────────┬───────────┘
                     │
         ┌───────────▼───────────┐
         │ Existing Figgy Pipeline│
         │ - File Manager         │
         │ - Document Extraction  │
         │ - Supplier Management  │
         └───────────────────────┘
```

### Component Specifications

#### 1. Communication Interface Service

**Purpose**: Central service for handling all messaging platform integrations

**Key Features**:
- Platform-agnostic message handling
- Webhook endpoint management
- Message type routing (files, commands, text)
- Rate limiting and abuse prevention

**Technical Requirements**:
- Built as a new package: `packages/communication`
- Hono-based HTTP server for webhooks
- TypeScript with strict mode
- Comprehensive error handling and logging

#### 2. WhatsApp Integration Module

**Purpose**: Handle WhatsApp-specific messaging via Twilio

**Key Features**:
- Phone number verification flow
- Secure number-to-tenant mapping
- PDF file reception and validation
- Basic command processing
- Group chat support investigation

**Technical Requirements**:
- Twilio SDK integration
- E.164 phone number formatting
- Secure verification code generation (6 digits, 10-minute expiry)
- Database schema for verified numbers

**Database Schema**:
```sql
-- Verified WhatsApp numbers
CREATE TABLE verified_whatsapp_numbers (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tenant_id UUID NOT NULL REFERENCES tenants(id),
  user_id UUID NOT NULL REFERENCES users(id),
  phone_number VARCHAR(20) NOT NULL, -- E.164 format
  display_name VARCHAR(255),
  verified_at TIMESTAMP WITH TIME ZONE NOT NULL,
  last_used_at TIMESTAMP WITH TIME ZONE,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(tenant_id, phone_number)
);

-- Verification attempts
CREATE TABLE whatsapp_verifications (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tenant_id UUID NOT NULL REFERENCES tenants(id),
  user_id UUID NOT NULL REFERENCES users(id),
  phone_number VARCHAR(20) NOT NULL,
  verification_code VARCHAR(6) NOT NULL,
  attempts INTEGER DEFAULT 0,
  verified BOOLEAN DEFAULT false,
  expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Message audit log
CREATE TABLE communication_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tenant_id UUID NOT NULL REFERENCES tenants(id),
  platform VARCHAR(50) NOT NULL, -- 'whatsapp', 'slack'
  external_id VARCHAR(255), -- Platform message ID
  sender_id VARCHAR(255) NOT NULL, -- Phone or Slack user ID
  message_type VARCHAR(50) NOT NULL, -- 'file', 'command', 'text'
  content JSONB,
  file_id UUID REFERENCES files(id),
  status VARCHAR(50) NOT NULL, -- 'received', 'processing', 'completed', 'failed'
  error_message TEXT,
  metadata JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

**Verification Flow**:
1. User initiates verification from web UI
2. System generates 6-digit code
3. Code sent via WhatsApp message
4. User enters code in web UI
5. System validates and stores verified number
6. User can now send documents via WhatsApp

#### 3. Slack Integration Module

**Purpose**: Handle Slack workspace integration and file reception

**Key Features**:
- OAuth2 workspace connection
- Channel selection for document submission
- User mapping to Figgy accounts
- File event handling

**Technical Requirements**:
- Slack SDK integration
- OAuth2 flow implementation
- Webhook event handling
- Secure token storage

**Database Schema**:
```sql
-- Slack workspace connections
CREATE TABLE slack_connections (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tenant_id UUID NOT NULL REFERENCES tenants(id),
  workspace_id VARCHAR(255) NOT NULL,
  workspace_name VARCHAR(255),
  channel_id VARCHAR(255) NOT NULL,
  channel_name VARCHAR(255),
  bot_token TEXT NOT NULL, -- Encrypted
  webhook_url TEXT,
  connected_by UUID NOT NULL REFERENCES users(id),
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(tenant_id, workspace_id)
);

-- Slack user mappings
CREATE TABLE slack_user_mappings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  slack_connection_id UUID NOT NULL REFERENCES slack_connections(id),
  slack_user_id VARCHAR(255) NOT NULL,
  figgy_user_id UUID REFERENCES users(id),
  email VARCHAR(255),
  display_name VARCHAR(255),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(slack_connection_id, slack_user_id)
);
```

#### 4. Frontend Components

**WhatsApp Verification Component**:
- Phone number input with country code selector
- Verification code input
- Status indicators
- Resend code functionality
- Remove verified number option

**Slack Connection Component**:
- "Connect to Slack" button
- OAuth2 redirect handling
- Channel selector
- Connection status display
- Disconnect functionality

**Integration Dashboard**:
- List of active integrations
- Usage statistics
- Recent submissions
- Error logs

### API Endpoints

#### Communication Service Endpoints

```typescript
// Webhook endpoints
POST /webhooks/whatsapp  // Twilio webhook
POST /webhooks/slack     // Slack events

// Internal API endpoints (via tRPC)
communications.verifyWhatsApp({ phoneNumber, code })
communications.sendVerificationCode({ phoneNumber })
communications.removeWhatsAppNumber({ phoneNumber })
communications.connectSlack({ code }) // OAuth code
communications.disconnectSlack({ connectionId })
communications.getIntegrations()
communications.getCommunicationLogs({ limit, offset })
```

### Security Requirements

1. **Authentication & Authorization**
   - All webhook endpoints must verify request signatures
   - Phone numbers tied to specific tenant and user
   - Slack connections scoped to tenant
   - Rate limiting on verification attempts

2. **Data Protection**
   - Encrypt bot tokens and sensitive data
   - No storage of message content beyond files
   - Audit log retention policy (90 days)
   - GDPR compliance for phone numbers

3. **Input Validation**
   - File type validation (PDF only initially)
   - File size limits (match existing limits)
   - Phone number format validation
   - Command injection prevention

### Performance Requirements

- Webhook response time: <200ms
- File upload to storage: <5 seconds for 10MB
- Verification code delivery: <30 seconds
- Maximum concurrent webhooks: 100/second

## User Experience

### WhatsApp User Flow

1. **Setup Phase**:
   - User navigates to Settings > Integrations
   - Clicks "Connect WhatsApp"
   - Enters phone number with country code
   - Receives verification code via WhatsApp
   - Enters code in web UI
   - Sees confirmation of verified number

2. **Usage Phase**:
   - User sends PDF to Figgy WhatsApp number
   - Receives: "Document received. Processing..."
   - Document appears in web UI
   - User receives: "Document processed successfully"

### Slack User Flow

1. **Setup Phase**:
   - Admin navigates to Settings > Integrations
   - Clicks "Connect to Slack"
   - Authorizes Figgy app in Slack
   - Selects channel for document submission
   - Sees confirmation in web UI

2. **Usage Phase**:
   - Team member uploads file to designated channel
   - Figgy bot responds: "Document received"
   - Document appears in web UI for all team members
   - Bot updates with processing status

## Implementation Plan

### Phase 1: Foundation (Week 1-2)
1. Create communication service package
2. Set up database migrations
3. Implement core message router
4. Create webhook endpoints
5. Add security middleware

### Phase 2: WhatsApp Integration (Week 3-4)
1. Twilio account setup and configuration
2. Implement verification flow
3. Create frontend verification components
4. Build WhatsApp message handler
5. Test end-to-end flow

### Phase 3: Slack Integration (Week 5-6)
1. Create Slack app and OAuth setup
2. Implement workspace connection flow
3. Build Slack event handlers
4. Create frontend connection components
5. Test team workflows

### Phase 4: Polish & Launch (Week 7-8)
1. Error handling improvements
2. Monitoring and alerting setup
3. Documentation
4. Performance optimization
5. Security audit
6. Gradual rollout

## Testing Strategy

### Unit Tests
- Message parsing logic
- File validation
- Authentication flows
- Database operations

### Integration Tests
- Webhook endpoint responses
- File upload pipeline
- Verification flow
- OAuth flows

### End-to-End Tests
- Complete WhatsApp submission flow
- Complete Slack submission flow
- Error scenarios
- Multi-tenant isolation

### Security Tests
- Webhook signature validation
- Rate limiting effectiveness
- Cross-tenant access attempts
- Input validation

## Monitoring & Analytics

### Key Metrics
- Messages received per platform
- Processing success rate
- Verification completion rate
- Average processing time
- Error rates by type

### Alerts
- Webhook failures
- Processing pipeline errors
- Unusual activity patterns
- Rate limit breaches

## Rollout Strategy

1. **Internal Testing**: 1 week with team
2. **Beta Testing**: 2 weeks with selected customers
3. **Gradual Rollout**: 25% → 50% → 100% over 2 weeks
4. **Full Launch**: Marketing announcement

## Success Criteria

- 95% uptime for webhook endpoints
- <5% document processing failure rate
- 80% of beta users successfully verify WhatsApp
- 70% of team accounts connect Slack
- Zero security incidents

## Future Enhancements

1. Additional messaging platforms (Teams, Telegram)
2. Two-way communication for status updates
3. Natural language commands
4. Bulk document processing
5. WhatsApp Business API advanced features
6. Mobile app with direct integration

## Dependencies

### External Services
- Twilio (WhatsApp Business API)
- Slack API
- Existing Supabase services

### Internal Dependencies
- File manager package
- Authentication system
- Job processing pipeline
- Tenant management

## Risks & Mitigations

1. **WhatsApp API Limitations**
   - Risk: Message/file size limits
   - Mitigation: Clear user communication, chunking if needed

2. **Verification Abuse**
   - Risk: SMS bombing attacks
   - Mitigation: Rate limiting, CAPTCHA, cost controls

3. **Platform Policy Changes**
   - Risk: API changes or restrictions
   - Mitigation: Abstraction layer, multiple platform support

4. **Security Breaches**
   - Risk: Unauthorized access via messaging
   - Mitigation: Strong verification, audit logging, monitoring

## Appendix

### Twilio Configuration
- WhatsApp Business Account setup
- Webhook URL configuration
- Message templates

### Slack App Manifest
- Required OAuth scopes
- Event subscriptions
- Bot permissions

### Error Codes
- Standard error code definitions
- User-friendly error messages
- Troubleshooting guide