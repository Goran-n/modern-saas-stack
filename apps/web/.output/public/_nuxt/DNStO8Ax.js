var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});import{f as useTrpc}from"./BGn8T2aB.js";import{u as useDebounceFn}from"./CDtqPBeL.js";import{f as ref,y as watch,E as computed}from"./BRSJK7Xo.js";function useSearch(options={}){const{limit=20,debounce=300}=options,$trpc=useTrpc(),query=ref(""),filters=ref({}),results=ref([]),isSearching=ref(!1),error=ref(null),debouncedSearch=useDebounceFn(__name(async searchQuery=>{if(!searchQuery.trim()){results.value=[];return}isSearching.value=!0,error.value=null;try{if(!$trpc.search||!$trpc.search.search){results.value=[];return}const response=await $trpc.search.search.query({query:searchQuery,filters:filters.value,limit});results.value=response.results||[]}catch(err){error.value=err,results.value=[]}finally{isSearching.value=!1}},"search"),debounce);watch(query,newQuery=>{newQuery.trim()?debouncedSearch(newQuery):results.value=[]}),watch(filters,()=>{query.value.trim()&&debouncedSearch(query.value)},{deep:!0});const hasResults=computed(()=>results.value.length>0);return{query,filters,results,hasResults,isSearching,error,search:__name(searchQuery=>{query.value=searchQuery},"search"),setFilters:__name(newFilters=>{filters.value=newFilters},"setFilters"),clearSearch:__name(()=>{query.value="",filters.value={}},"clearSearch")}}__name(useSearch,"useSearch");export{useSearch as u};
