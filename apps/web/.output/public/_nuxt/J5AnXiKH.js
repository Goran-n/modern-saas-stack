var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});import{e as useTenantStore,f as useTrpc,g as useRuntimeConfig,X as useState}from"./BGn8T2aB.js";import{u as useToast}from"./DOQLo0N3.js";import{f as ref,E as computed,F as readonly}from"./BRSJK7Xo.js";const useFileService=__name(()=>{const operations=ref(new Map),errors=ref([]),isOperationInProgress=__name((fileId,type)=>{const op=operations.value.get(fileId);return!op||type&&op.type!==type?!1:op.status==="in_progress"},"isOperationInProgress"),handleError=__name((error,code)=>{const fileError={code,message:error instanceof Error?error.message:"An unknown error occurred",details:error};return errors.value.push(fileError),fileError},"handleError"),clearErrors=__name(()=>{errors.value=[]},"clearErrors"),trackOperation=__name((fileId,type)=>{const operation={fileId,type,status:"pending"};return operations.value.set(fileId,operation),operation},"trackOperation"),updateOperation=__name((fileId,updates)=>{const op=operations.value.get(fileId);op&&operations.value.set(fileId,{...op,...updates})},"updateOperation"),downloadFile=__name(async(file,options)=>{trackOperation(file.id,"download");try{updateOperation(file.id,{status:"in_progress"});const baseUrl=options?.apiUrl||"/api",tenantId=options?.tenantId;if(!tenantId)throw new Error("Tenant ID is required for file download");const downloadUrl=`${baseUrl}/files/download/${file.id}?tenantId=${tenantId}`;return window.open(downloadUrl,"_blank"),updateOperation(file.id,{status:"completed"}),!0}catch(error){const fileError=handleError(error,"NETWORK_ERROR");return updateOperation(file.id,{status:"failed",error:fileError}),!1}},"downloadFile"),reprocessFile=__name(async(fileId,onReprocess)=>{trackOperation(fileId,"reprocess");try{if(updateOperation(fileId,{status:"in_progress"}),!onReprocess)throw new Error("Reprocess handler not provided");return await onReprocess(fileId),updateOperation(fileId,{status:"completed"}),!0}catch(error){const fileError=handleError(error,"PROCESSING_ERROR");return updateOperation(fileId,{status:"failed",error:fileError}),!1}},"reprocessFile"),getProxyUrl=__name((fileId,options)=>{if(!fileId||!options?.tenantId)return null;const baseUrl=options.apiUrl||"/api",toolbar=options.toolbar??!1;return`${baseUrl}/files/proxy/${fileId}?tenantId=${options.tenantId}${toolbar?"":"#toolbar=0"}`},"getProxyUrl"),getDownloadUrl=__name((fileId,options)=>!fileId||!options?.tenantId?null:`${options.apiUrl||"/api"}/files/download/${fileId}?tenantId=${options.tenantId}`,"getDownloadUrl"),createFileDragData=__name((file,tenantId)=>{const fileName=file.metadata?.displayName||file.fileName;return{type:"figgy-file",fileId:file.id,fileName,tenantId,mimeType:file.mimeType,size:file.size}},"createFileDragData"),handleFileDragStart=__name((event,file,tenantId)=>{const dragData=createFileDragData(file,tenantId);event.dataTransfer.effectAllowed="copy",event.dataTransfer.setData("application/x-figgy-file",JSON.stringify(dragData)),event.dataTransfer.setData("text/plain",JSON.stringify(dragData));const dragImage=createDragPreview(file.fileName);event.dataTransfer.setDragImage(dragImage,0,0),setTimeout(()=>dragImage.remove(),0)},"handleFileDragStart"),createDragPreview=__name(fileName=>{const preview=document.createElement("div");return preview.className="fixed -top-[1000px] left-0 pointer-events-none",preview.innerHTML=`
      <div class="flex items-center gap-2 px-3 py-2 bg-white rounded-lg shadow-xl border border-neutral-200">
        <svg width="16" height="16" viewBox="0 0 20 20" fill="none" class="text-neutral-500">
          <path d="M10 2L4 2C2.89543 2 2 2.89543 2 4V16C2 17.1046 2.89543 18 4 18H16C17.1046 18 18 17.1046 18 16V8L12 2H10Z" stroke="currentColor" stroke-width="2"/>
          <path d="M10 2V8H16" stroke="currentColor" stroke-width="2"/>
        </svg>
        <span class="text-sm font-medium text-neutral-700 max-w-[200px] truncate">${fileName}</span>
      </div>
    `,document.body.appendChild(preview),preview},"createDragPreview"),batchDownload=__name(async(files,options)=>{const results={successful:[],failed:[]};for(const file of files)await downloadFile(file,options)?results.successful.push(file.id):results.failed.push(file.id);return results},"batchDownload"),hasErrors=computed(()=>errors.value.length>0),latestError=computed(()=>errors.value[errors.value.length-1]),activeOperations=computed(()=>Array.from(operations.value.values()).filter(op=>op.status==="in_progress"));return{downloadFile,reprocessFile,getProxyUrl,getDownloadUrl,handleFileDragStart,createFileDragData,batchDownload,isOperationInProgress,operations:computed(()=>operations.value),activeOperations,errors:computed(()=>errors.value),hasErrors,latestError,clearErrors,handleError,trackOperation,updateOperation}},"useFileService"),useFileOperations=__name(()=>{const tenantStore=useTenantStore(),config=useRuntimeConfig(),toast=useToast(),trpc=useTrpc(),fileService=useFileService();return{downloadFile:__name(async file=>{const success=await fileService.downloadFile(file,{apiUrl:config.public.apiUrl,tenantId:tenantStore.selectedTenantId||void 0});return success||toast.add({title:"Download failed",description:fileService.latestError.value?.message||"Failed to download file",color:"error",icon:"i-heroicons-exclamation-circle"}),success},"downloadFile"),reprocessFile:__name(async fileId=>{const success=await fileService.reprocessFile(fileId,async id=>{await trpc.files.reprocess.mutate({fileId:id})});return success?toast.add({title:"Reprocessing started",description:"The file will be processed again from scratch",color:"primary",icon:"i-heroicons-arrow-path"}):toast.add({title:"Reprocess failed",description:fileService.latestError.value?.message||"Failed to reprocess file",color:"error",icon:"i-heroicons-exclamation-circle"}),success},"reprocessFile"),getProxyUrl:__name(fileId=>fileService.getProxyUrl(fileId,{apiUrl:config.public.apiUrl,tenantId:tenantStore.selectedTenantId||void 0,toolbar:!1}),"getProxyUrl"),getDownloadUrl:__name(fileId=>fileService.getDownloadUrl(fileId,{apiUrl:config.public.apiUrl,tenantId:tenantStore.selectedTenantId||void 0}),"getDownloadUrl"),handleFileDragStart:__name((event,file)=>{fileService.handleFileDragStart(event,file,tenantStore.selectedTenantId||void 0)},"handleFileDragStart"),batchDownload:__name(async files=>{const results=await fileService.batchDownload(files,{apiUrl:config.public.apiUrl,tenantId:tenantStore.selectedTenantId||void 0});return results.failed.length>0?toast.add({title:"Some downloads failed",description:`${results.failed.length} of ${files.length} files failed to download`,color:"warning",icon:"i-heroicons-exclamation-triangle"}):results.successful.length>0&&toast.add({title:"Downloads started",description:`Downloading ${results.successful.length} files`,color:"success",icon:"i-heroicons-arrow-down-tray"}),results},"batchDownload"),isReprocessing:__name(fileId=>fileService.isOperationInProgress(fileId,"reprocess"),"isReprocessing"),isDownloading:__name(fileId=>fileService.isOperationInProgress(fileId,"download"),"isDownloading"),activeOperations:fileService.activeOperations,errors:fileService.errors,clearErrors:fileService.clearErrors}},"useFileOperations"),useFileState=__name(()=>{const selectedFile=useState("selected-file",()=>null),viewMode=useState("file-view-mode",()=>"grid"),dragState=useState("file-drag-state",()=>({isDragging:!1,draggedFile:null})),reprocessModal=useState("reprocess-modal",()=>({isOpen:!1,file:null,isProcessing:!1})),selectFile=__name(file=>{selectedFile.value=file},"selectFile"),setViewMode=__name(mode=>{viewMode.value=mode},"setViewMode"),openReprocessModal=__name(file=>{reprocessModal.value={isOpen:!0,file,isProcessing:!1}},"openReprocessModal"),closeReprocessModal=__name(()=>{reprocessModal.value={isOpen:!1,file:null,isProcessing:!1}},"closeReprocessModal"),setReprocessModalProcessing=__name(isProcessing=>{reprocessModal.value.isProcessing=isProcessing},"setReprocessModalProcessing"),startDrag=__name(file=>{dragState.value={isDragging:!0,draggedFile:file}},"startDrag"),endDrag=__name(()=>{dragState.value={isDragging:!1,draggedFile:null}},"endDrag");return{selectedFile:readonly(selectedFile),viewMode:readonly(viewMode),dragState:readonly(dragState),reprocessModal:readonly(reprocessModal),selectFile,setViewMode,openReprocessModal,closeReprocessModal,setReprocessModalProcessing,startDrag,endDrag}},"useFileState");export{useFileState as a,useFileOperations as u};
