var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});import{D as defineStore}from"./BRSJK7Xo.js";import{u as useApi}from"./Cw4ufSzG.js";const useCommunicationStore=defineStore("communication",{state:__name(()=>({stats:{totalMessages:0,whatsappMessages:0,slackMessages:0,filesProcessedToday:0,failedProcessing:0,pendingVerifications:0},recentActivity:[],verifications:[],workspaces:[],isLoading:!1,error:null}),"state"),getters:{pendingVerifications:__name(state=>state.verifications.filter(v=>!v.verified&&new Date(v.expiresAt)>new Date),"pendingVerifications"),expiredVerifications:__name(state=>state.verifications.filter(v=>!v.verified&&new Date(v.expiresAt)<=new Date),"expiredVerifications"),activeWorkspaces:__name(state=>state.workspaces.filter(w=>w.botToken),"activeWorkspaces"),failedActivities:__name(state=>state.recentActivity.filter(a=>a.status==="failed"),"failedActivities")},actions:{async fetchStats(){this.isLoading=!0,this.error=null;try{const response=await useApi().get("/trpc/communication.getStats");this.stats=response.result.data.json}catch{this.error="Failed to load statistics"}finally{this.isLoading=!1}},async fetchRecentActivity(){try{const response=await useApi().get("/trpc/communication.getRecentActivity");this.recentActivity=response.result.data.json}catch{}},async fetchVerifications(){const response=await useApi().get("/trpc/communication.getVerifications");this.verifications=response.result.data.json},async updateVerification(id,verified){await useApi().post("/trpc/communication.updateVerification",{json:{id,verified}});const verification=this.verifications.find(v=>v.id===id);verification&&(verification.verified=verified)},async fetchWorkspaces(){const response=await useApi().get("/trpc/communication.getWorkspaces");this.workspaces=response.result.data.json},async retryFailedProcessing(activityId){await useApi().post("/trpc/communication.retryProcessing",{json:{activityId}});const activity=this.recentActivity.find(a=>a.id===activityId);activity&&(activity.status="pending")},addActivity(activity){this.recentActivity.unshift({...activity,id:`activity-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,timestamp:new Date().toISOString()}),this.recentActivity.length>50&&(this.recentActivity=this.recentActivity.slice(0,50))}}});export{useCommunicationStore as u};
