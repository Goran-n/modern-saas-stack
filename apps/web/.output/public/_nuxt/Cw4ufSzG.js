var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});import{e as useTenantStore,g as useRuntimeConfig,n as navigateTo,c as useSupabaseClient}from"./BGn8T2aB.js";import{u as useAuthStore}from"./BzzzcPO6.js";import{u as useNotifications}from"./BzjSxxHY.js";const useApi=__name(()=>{const config=useRuntimeConfig(),authStore=useAuthStore(),tenantStore=useTenantStore(),{auth}=useNotifications(),apiFetch=$fetch.create({baseURL:config.public.apiUrl,async onRequest({options}){const supabaseClient=useSupabaseClient(),{data:{session}}=await supabaseClient.auth.getSession(),token=session?.access_token;if(token){const headers={Authorization:`Bearer ${token}`},tenantId=tenantStore.selectedTenantId;if(tenantId&&(headers["x-tenant-id"]=String(tenantId)),options.headers instanceof Headers)Object.entries(headers).forEach(([key,value])=>{options.headers.set(key,value)});else{const existingHeaders=options.headers||{};options.headers={...existingHeaders,...headers}}}},async onResponseError({response}){if(response.status===401){try{await authStore.signOut(),auth.signOutSuccess()}catch{}await navigateTo("/auth/login")}}});return{get:__name((url,options)=>apiFetch(url,{...options,method:"GET"}),"get"),post:__name((url,body,options)=>apiFetch(url,{...options,method:"POST",body}),"post"),put:__name((url,body,options)=>apiFetch(url,{...options,method:"PUT",body}),"put"),patch:__name((url,body,options)=>apiFetch(url,{...options,method:"PATCH",body}),"patch"),delete:__name((url,options)=>apiFetch(url,{...options,method:"DELETE"}),"delete")}},"useApi");export{useApi as u};
