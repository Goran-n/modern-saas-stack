{
  "timestamp": "2025-08-03T10:26:13.777Z",
  "success": false,
  "successRate": 0,
  "results": [
    {
      "suite": "Invoice Format Tests",
      "status": "failed",
      "duration": 1404,
      "error": "Command failed: vitest run test/unit/invoice-format.test.ts\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ Failed Tests 10 ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n\n FAIL  test/unit/invoice-format.test.ts > Invoice Format Tests > PDF Format Validation > should validate Adobe invoice PDF format\n FAIL  test/unit/invoice-format.test.ts > Invoice Format Tests > PDF Format Validation > should validate Microsoft invoice PDF format\n FAIL  test/unit/invoice-format.test.ts > Invoice Format Tests > PDF Format Validation > should validate ChatGPT invoice PDF format\n FAIL  test/unit/invoice-format.test.ts > Invoice Format Tests > PDF Format Validation > should validate Xero invoice PDF format\n FAIL  test/unit/invoice-format.test.ts > Invoice Format Tests > PDF Format Validation > should validate Notion invoice PDF format\n FAIL  test/unit/invoice-format.test.ts > Invoice Format Tests > PDF Format Validation > should validate Figma invoice PDF format\nAssertionError: expected \"spy\" to be called at least once\n ‚ùØ test/unit/invoice-format.test.ts:86:31\n     84|         \n     85|         // Verify atomic upload pattern was followed\n     86|         expect(mockDb.insert).toHaveBeenCalled();\n       |                               ^\n     87|         expect(mockDb.values).toHaveBeenCalledWith(\n     88|           expect.objectContaining({\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[1/10]‚éØ\n\n FAIL  test/unit/invoice-format.test.ts > Invoice Format Tests > PDF Format Validation > should handle corrupted PDF files\nAssertionError: promise resolved \"{ id: 'test-file-id', ‚Ä¶(1) }\" instead of rejecting\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- Error {\u001b[39m\n\u001b[32m-   \"message\": \"rejected promise\",\u001b[39m\n\u001b[31m+ {\u001b[39m\n\u001b[31m+   \"id\": \"test-file-id\",\u001b[39m\n\u001b[31m+   \"publicUrl\": \"https://test.com/file.pdf\",\u001b[39m\n\u001b[2m  }\u001b[22m\n\n ‚ùØ test/unit/invoice-format.test.ts:119:9\n    117|         bucket: 'invoices',\n    118|         path: ['2024', 'test', 'corrupted.pdf']\n    119|       })).rejects.toThrow();\n       |         ^\n    120|       \n    121|       // Verify record was created but marked as failed\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[2/10]‚éØ\n\n FAIL  test/unit/invoice-format.test.ts > Invoice Format Tests > File Type Validation > should accept valid invoice file types\nAssertionError: expected \"spy\" to be called at least once\n ‚ùØ test/unit/invoice-format.test.ts:152:31\n    150|         });\n    151|         \n    152|         expect(mockDb.insert).toHaveBeenCalled();\n       |                               ^\n    153|         expect(mockStorageClient.uploadBuffer).toHaveBeenCalled();\n    154|       }\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[3/10]‚éØ\n\n FAIL  test/unit/invoice-format.test.ts > Invoice Format Tests > File Type Validation > should validate file size limits\nAssertionError: expected \"spy\" to be called at least once\n ‚ùØ test/unit/invoice-format.test.ts:173:46\n    171|       });\n    172|       \n    173|       expect(mockStorageClient.uploadBuffer).toHaveBeenCalled();\n       |                                              ^\n    174|     });\n    175|   });\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[4/10]‚éØ\n\n FAIL  test/unit/invoice-format.test.ts > Invoice Format Tests > Multi-page Invoice Handling > should handle multi-page PDF invoices\nAssertionError: expected \"spy\" to be called with arguments: [ ObjectContaining{‚Ä¶} ]\u001b[90m\n\nNumber of calls: \u001b[1m0\u001b[22m\n\u001b[39m\n ‚ùØ test/unit/invoice-format.test.ts:197:29\n    195|       });\n    196|       \n    197|       expect(mockDb.values).toHaveBeenCalledWith(\n       |                             ^\n    198|         expect.objectContaining({\n    199|           metadata: expect.objectContaining({\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[5/10]‚éØ\n\n",
      "output": "\n RUN  v3.2.4 /Users/goran/Projects/kibly/packages/file-manager\n\nstdout | test/unit/invoice-format.test.ts\n[dotenv@17.2.1] injecting env (5) from .env.test -- tip: ‚öôÔ∏è  load multiple .env files with { path: ['.env.local', '.env'] }\n\nstdout | test/unit/invoice-format.test.ts\nüîß Test environment ready\n\nstdout | test/unit/invoice-format.test.ts\n‚úÖ Tests completed\n\n ‚ùØ test/unit/invoice-format.test.ts (10 tests | 10 failed) 34ms\n   √ó Invoice Format Tests > PDF Format Validation > should validate Adobe invoice PDF format 6ms\n     ‚Üí expected \"spy\" to be called at least once\n   √ó Invoice Format Tests > PDF Format Validation > should validate Microsoft invoice PDF format 1ms\n     ‚Üí expected \"spy\" to be called at least once\n   √ó Invoice Format Tests > PDF Format Validation > should validate ChatGPT invoice PDF format 0ms\n     ‚Üí expected \"spy\" to be called at least once\n   √ó Invoice Format Tests > PDF Format Validation > should validate Xero invoice PDF format 0ms\n     ‚Üí expected \"spy\" to be called at least once\n   √ó Invoice Format Tests > PDF Format Validation > should validate Notion invoice PDF format 0ms\n     ‚Üí expected \"spy\" to be called at least once\n   √ó Invoice Format Tests > PDF Format Validation > should validate Figma invoice PDF format 0ms\n     ‚Üí expected \"spy\" to be called at least once\n   √ó Invoice Format Tests > PDF Format Validation > should handle corrupted PDF files 4ms\n     ‚Üí promise resolved \"{ id: 'test-file-id', ‚Ä¶(1) }\" instead of rejecting\n   √ó Invoice Format Tests > File Type Validation > should accept valid invoice file types 1ms\n     ‚Üí expected \"spy\" to be called at least once\n   √ó Invoice Format Tests > File Type Validation > should validate file size limits 14ms\n     ‚Üí expected \"spy\" to be called at least once\n   √ó Invoice Format Tests > Multi-page Invoice Handling > should handle multi-page PDF invoices 5ms\n     ‚Üí expected \"spy\" to be called with arguments: [ ObjectContaining{‚Ä¶} ]\u001b[90m\n\nNumber of calls: \u001b[1m0\u001b[22m\n\u001b[39m\n\n Test Files  1 failed (1)\n      Tests  10 failed (10)\n   Start at  11:26:09\n   Duration  963ms (transform 191ms, setup 28ms, collect 718ms, tests 34ms, environment 0ms, prepare 47ms)\n\n"
    },
    {
      "suite": "Vendor Matching Tests",
      "status": "failed",
      "duration": 1468,
      "error": "Command failed: vitest run test/unit/vendor-matching.test.ts\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ Failed Tests 1 ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n\n FAIL  test/unit/vendor-matching.test.ts > Vendor Matching Tests > Fuzzy Matching > should handle minor typos in vendor names\nAssertionError: expected 4 to be less than or equal to 2\n ‚ùØ test/unit/vendor-matching.test.ts:195:26\n    193|         \n    194|         // Should match if distance is <= 2\n    195|         expect(distance).toBeLessThanOrEqual(2);\n       |                          ^\n    196|       });\n    197|     });\n ‚ùØ test/unit/vendor-matching.test.ts:187:17\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[1/1]‚éØ\n\n",
      "output": "\n RUN  v3.2.4 /Users/goran/Projects/kibly/packages/file-manager\n\nstdout | test/unit/vendor-matching.test.ts\n[dotenv@17.2.1] injecting env (5) from .env.test -- tip: üîê prevent committing .env to code: https://dotenvx.com/precommit\n\nstdout | test/unit/vendor-matching.test.ts\nüîß Test environment ready\n\nstdout | test/unit/vendor-matching.test.ts\n‚úÖ Tests completed\n\n ‚ùØ test/unit/vendor-matching.test.ts (23 tests | 1 failed) 21ms\n   ‚úì Vendor Matching Tests > Exact Vendor Name Matching > should match vendor for adobe_subscription.json 2ms\n   ‚úì Vendor Matching Tests > Exact Vendor Name Matching > should match vendor variations for Adobe Systems Software Ireland Ltd 1ms\n   ‚úì Vendor Matching Tests > Exact Vendor Name Matching > should match vendor for microsoft_invoice.json 0ms\n   ‚úì Vendor Matching Tests > Exact Vendor Name Matching > should match vendor variations for Microsoft Ireland Operations Ltd 0ms\n   ‚úì Vendor Matching Tests > Exact Vendor Name Matching > should match vendor for chatgpt_invoice.json 1ms\n   ‚úì Vendor Matching Tests > Exact Vendor Name Matching > should match vendor variations for OpenAI, LLC 0ms\n   ‚úì Vendor Matching Tests > Exact Vendor Name Matching > should match vendor for xero_monthly.json 0ms\n   ‚úì Vendor Matching Tests > Exact Vendor Name Matching > should match vendor variations for Xero (NZ) Ltd 1ms\n   ‚úì Vendor Matching Tests > Exact Vendor Name Matching > should match vendor for notion_invoice.json 1ms\n   ‚úì Vendor Matching Tests > Exact Vendor Name Matching > should match vendor variations for Notion Labs, Inc. 0ms\n   ‚úì Vendor Matching Tests > Exact Vendor Name Matching > should match vendor for figma_invoice.json 0ms\n   ‚úì Vendor Matching Tests > Exact Vendor Name Matching > should match vendor variations for Figma, Inc. 0ms\n   ‚úì Vendor Matching Tests > Domain-based Vendor Matching > should match vendors by domain when name match fails 0ms\n   ‚úì Vendor Matching Tests > Domain-based Vendor Matching > should handle email domain extraction 1ms\n   ‚úì Vendor Matching Tests > VAT Number Validation > should validate VAT number IE6364992H for Adobe 1ms\n   ‚úì Vendor Matching Tests > VAT Number Validation > should validate VAT number IE8256796U for Microsoft 0ms\n   ‚úì Vendor Matching Tests > VAT Number Validation > should validate VAT number EU372041333 for OpenAI 0ms\n   ‚úì Vendor Matching Tests > VAT Number Validation > should validate VAT number 4110278571 for Xero 0ms\n   ‚úì Vendor Matching Tests > VAT Number Validation > should validate VAT number EU528003828 for Notion 0ms\n   ‚úì Vendor Matching Tests > VAT Number Validation > should validate VAT number EU372054390 for Figma 0ms\n   √ó Vendor Matching Tests > Fuzzy Matching > should handle minor typos in vendor names 6ms\n     ‚Üí expected 4 to be less than or equal to 2\n   ‚úì Vendor Matching Tests > Fuzzy Matching > should normalize company suffixes 1ms\n   ‚úì Vendor Matching Tests > New Vendor Creation > should create new vendor when no match is found 1ms\n\n Test Files  1 failed (1)\n      Tests  1 failed | 22 passed (23)\n   Start at  11:26:10\n   Duration  1.08s (transform 287ms, setup 35ms, collect 844ms, tests 21ms, environment 0ms, prepare 55ms)\n\n"
    },
    {
      "suite": "Extraction Accuracy Tests",
      "status": "failed",
      "duration": 611,
      "error": "Command failed: vitest run test/integration/extraction-accuracy.test.ts\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ Failed Tests 10 ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n\n FAIL  test/integration/extraction-accuracy.test.ts > Extraction Accuracy Tests > Date Extraction and Parsing > should correctly parse date format for Adobe\nAssertionError: expected 1729033200000 to be 1729036800000 // Object.is equality\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- 1729036800000\u001b[39m\n\u001b[31m+ 1729033200000\u001b[39m\n\n ‚ùØ test/integration/extraction-accuracy.test.ts:164:34\n    162|       it(`should correctly parse date format for ${invoice}`, () => {\n    163|         const parsed = parseInvoiceDate(invoiceDate);\n    164|         expect(parsed.getTime()).toBe(expectedParsed.getTime());\n       |                                  ^\n    165|       });\n    166|     });\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[1/10]‚éØ\n\n FAIL  test/integration/extraction-accuracy.test.ts > Extraction Accuracy Tests > Date Extraction and Parsing > should correctly parse date format for ChatGPT\nAssertionError: expected 1726614000000 to be 1726617600000 // Object.is equality\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- 1726617600000\u001b[39m\n\u001b[31m+ 1726614000000\u001b[39m\n\n ‚ùØ test/integration/extraction-accuracy.test.ts:164:34\n    162|       it(`should correctly parse date format for ${invoice}`, () => {\n    163|         const parsed = parseInvoiceDate(invoiceDate);\n    164|         expect(parsed.getTime()).toBe(expectedParsed.getTime());\n       |                                  ^\n    165|       });\n    166|     });\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[2/10]‚éØ\n\n FAIL  test/integration/extraction-accuracy.test.ts > Extraction Accuracy Tests > Line Item Extraction > should extract all line items from multi-item invoices\nReferenceError: mockExtractDocumentData is not defined\n ‚ùØ test/integration/extraction-accuracy.test.ts:172:7\n    170|     it('should extract all line items from multi-item invoices', async‚Ä¶\n    171|       // Figma has 2 line items\n    172|       mockExtractDocumentData.mockResolvedValueOnce({\n       |       ^\n    173|         lineItems: [\n    174|           {\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[3/10]‚éØ\n\n FAIL  test/integration/extraction-accuracy.test.ts > Extraction Accuracy Tests > Line Item Extraction > should handle discount line items\nReferenceError: mockExtractDocumentData is not defined\n ‚ùØ test/integration/extraction-accuracy.test.ts:202:7\n    200|     it('should handle discount line items', async () => {\n    201|       // Xero has a discount line item\n    202|       mockExtractDocumentData.mockResolvedValueOnce({\n       |       ^\n    203|         lineItems: [\n    204|           {\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[4/10]‚éØ\n\n FAIL  test/integration/extraction-accuracy.test.ts > Extraction Accuracy Tests > Billing Period Extraction > should extract billing period for Adobe\n FAIL  test/integration/extraction-accuracy.test.ts > Extraction Accuracy Tests > Billing Period Extraction > should extract billing period for Microsoft\n FAIL  test/integration/extraction-accuracy.test.ts > Extraction Accuracy Tests > Billing Period Extraction > should extract billing period for ChatGPT\n FAIL  test/integration/extraction-accuracy.test.ts > Extraction Accuracy Tests > Billing Period Extraction > should extract billing period for Notion\nReferenceError: mockExtractDocumentData is not defined\n ‚ùØ test/integration/extraction-accuracy.test.ts:260:9\n    258|     periodTests.forEach(({ invoice, from, to, days }) => {\n    259|       it(`should extract billing period for ${invoice}`, async () => {\n    260|         mockExtractDocumentData.mockResolvedValueOnce({\n       |         ^\n    261|           billingPeriod: {\n    262|             from: from,\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[5/10]‚éØ\n\n FAIL  test/integration/extraction-accuracy.test.ts > Extraction Accuracy Tests > Customer Information Extraction > should extract customer details accurately\nReferenceError: mockExtractDocumentData is not defined\n ‚ùØ test/integration/extraction-accuracy.test.ts:305:9\n    303| \n    304|       for (const test of customerTests) {\n    305|         mockExtractDocumentData.mockResolvedValueOnce({\n       |         ^\n    306|           customer: test.customer\n    307|         });\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[6/10]‚éØ\n\n FAIL  test/integration/extraction-accuracy.test.ts > Extraction Accuracy Tests > Extraction Confidence Scoring > should provide confidence scores for extracted data\nReferenceError: mockExtractDocumentData is not defined\n ‚ùØ test/integration/extraction-accuracy.test.ts:321:7\n    319|   describe('Extraction Confidence Scoring', () => {\n    320|     it('should provide confidence scores for extracted data', async ()‚Ä¶\n    321|       mockExtractDocumentData.mockResolvedValueOnce({\n       |       ^\n    322|         invoice: {\n    323|           number: 'INV-12345',\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[7/10]‚éØ\n\n",
      "output": "\n RUN  v3.2.4 /Users/goran/Projects/kibly/packages/file-manager\n\nstdout | test/integration/extraction-accuracy.test.ts\n[dotenv@17.2.1] injecting env (5) from .env.test -- tip: üõ†Ô∏è  run anywhere with `dotenvx run -- yourcommand`\n\nstdout | test/integration/extraction-accuracy.test.ts\nüîß Test environment ready\n\nstdout | test/integration/extraction-accuracy.test.ts\n‚úÖ Tests completed\n\n ‚ùØ test/integration/extraction-accuracy.test.ts (26 tests | 10 failed) 12ms\n   ‚úì Extraction Accuracy Tests > Invoice Data Extraction > should accurately extract data from Adobe invoice 1ms\n   ‚úì Extraction Accuracy Tests > Invoice Data Extraction > should accurately extract data from Microsoft invoice 0ms\n   ‚úì Extraction Accuracy Tests > Invoice Data Extraction > should accurately extract data from ChatGPT invoice 0ms\n   ‚úì Extraction Accuracy Tests > Invoice Data Extraction > should accurately extract data from Xero invoice 0ms\n   ‚úì Extraction Accuracy Tests > Invoice Data Extraction > should accurately extract data from Notion invoice 0ms\n   ‚úì Extraction Accuracy Tests > Invoice Data Extraction > should accurately extract data from Figma invoice 0ms\n   ‚úì Extraction Accuracy Tests > Amount Extraction Accuracy > should extract correct amounts for Adobe invoice 0ms\n   ‚úì Extraction Accuracy Tests > Amount Extraction Accuracy > should extract correct amounts for Microsoft invoice 0ms\n   ‚úì Extraction Accuracy Tests > Amount Extraction Accuracy > should extract correct amounts for ChatGPT invoice 0ms\n   ‚úì Extraction Accuracy Tests > Amount Extraction Accuracy > should extract correct amounts for Xero invoice 0ms\n   ‚úì Extraction Accuracy Tests > Amount Extraction Accuracy > should extract correct amounts for Notion invoice 0ms\n   ‚úì Extraction Accuracy Tests > Amount Extraction Accuracy > should extract correct amounts for Figma invoice 0ms\n   √ó Extraction Accuracy Tests > Date Extraction and Parsing > should correctly parse date format for Adobe 6ms\n     ‚Üí expected 1729033200000 to be 1729036800000 // Object.is equality\n   ‚úì Extraction Accuracy Tests > Date Extraction and Parsing > should correctly parse date format for Microsoft 0ms\n   √ó Extraction Accuracy Tests > Date Extraction and Parsing > should correctly parse date format for ChatGPT 0ms\n     ‚Üí expected 1726614000000 to be 1726617600000 // Object.is equality\n   ‚úì Extraction Accuracy Tests > Date Extraction and Parsing > should correctly parse date format for Xero 0ms\n   ‚úì Extraction Accuracy Tests > Date Extraction and Parsing > should correctly parse date format for Notion 0ms\n   ‚úì Extraction Accuracy Tests > Date Extraction and Parsing > should correctly parse date format for Figma 0ms\n   √ó Extraction Accuracy Tests > Line Item Extraction > should extract all line items from multi-item invoices 0ms\n     ‚Üí mockExtractDocumentData is not defined\n   √ó Extraction Accuracy Tests > Line Item Extraction > should handle discount line items 1ms\n     ‚Üí mockExtractDocumentData is not defined\n   √ó Extraction Accuracy Tests > Billing Period Extraction > should extract billing period for Adobe 0ms\n     ‚Üí mockExtractDocumentData is not defined\n   √ó Extraction Accuracy Tests > Billing Period Extraction > should extract billing period for Microsoft 0ms\n     ‚Üí mockExtractDocumentData is not defined\n   √ó Extraction Accuracy Tests > Billing Period Extraction > should extract billing period for ChatGPT 0ms\n     ‚Üí mockExtractDocumentData is not defined\n   √ó Extraction Accuracy Tests > Billing Period Extraction > should extract billing period for Notion 0ms\n     ‚Üí mockExtractDocumentData is not defined\n   √ó Extraction Accuracy Tests > Customer Information Extraction > should extract customer details accurately 0ms\n     ‚Üí mockExtractDocumentData is not defined\n   √ó Extraction Accuracy Tests > Extraction Confidence Scoring > should provide confidence scores for extracted data 0ms\n     ‚Üí mockExtractDocumentData is not defined\n\n Test Files  1 failed (1)\n      Tests  10 failed | 16 passed (26)\n   Start at  11:26:12\n   Duration  251ms (transform 54ms, setup 30ms, collect 38ms, tests 12ms, environment 0ms, prepare 46ms)\n\n"
    },
    {
      "suite": "Edge Case Tests",
      "status": "failed",
      "duration": 1350,
      "error": "Command failed: vitest run test/integration/edge-cases.test.ts\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ Failed Tests 13 ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n\n FAIL  test/integration/edge-cases.test.ts > Edge Case Tests > Corrupted File Handling > should handle zero-byte files\nAssertionError: expected \"spy\" to be called with arguments: [ ‚Ä¶(1) ]\u001b[90m\n\nNumber of calls: \u001b[1m0\u001b[22m\n\u001b[39m\n ‚ùØ test/integration/edge-cases.test.ts:62:29\n     60| \n     61|       // Should mark as failed\n     62|       expect(mockDb.update).toHaveBeenCalledWith(filesTable);\n       |                             ^\n     63|       expect(mockDb.set).toHaveBeenCalledWith(\n     64|         expect.objectContaining({\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[1/13]‚éØ\n\n FAIL  test/integration/edge-cases.test.ts > Edge Case Tests > Corrupted File Handling > should handle partially corrupted PDFs\nZodError: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"object\",\n    \"received\": \"undefined\",\n    \"path\": [],\n    \"message\": \"Required\"\n  }\n]\n ‚ùØ Object.get error [as error] ../../node_modules/zod/v3/types.js:39:31\n ‚ùØ ZodObject.parse ../../node_modules/zod/v3/types.js:114:22\n ‚ùØ Module.uploadFile src/operations.ts:39:43\n     37| ): Promise<string> {\n     38|   // Validate input against schema\n     39|   const validatedInput = createFileSchema.parse(input);\n       |                                           ^\n     40|   \n     41|   const sanitisedFileName = stripSpecialCharacters(file.name);\n ‚ùØ test/integration/edge-cases.test.ts:86:13\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[2/13]‚éØ\n\n FAIL  test/integration/edge-cases.test.ts > Edge Case Tests > Corrupted File Handling > should handle files with wrong MIME type\nZodError: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"object\",\n    \"received\": \"undefined\",\n    \"path\": [],\n    \"message\": \"Required\"\n  }\n]\n ‚ùØ Object.get error [as error] ../../node_modules/zod/v3/types.js:39:31\n ‚ùØ ZodObject.parse ../../node_modules/zod/v3/types.js:114:22\n ‚ùØ Module.uploadFile src/operations.ts:39:43\n     37| ): Promise<string> {\n     38|   // Validate input against schema\n     39|   const validatedInput = createFileSchema.parse(input);\n       |                                           ^\n     40|   \n     41|   const sanitisedFileName = stripSpecialCharacters(file.name);\n ‚ùØ test/integration/edge-cases.test.ts:107:13\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[3/13]‚éØ\n\n FAIL  test/integration/edge-cases.test.ts > Edge Case Tests > Dead Letter Queue Recovery > should move to dead letter after max retries\nAssertionError: expected \"spy\" to be called with arguments: [ ‚Ä¶(1) ]\u001b[90m\n\nNumber of calls: \u001b[1m0\u001b[22m\n\u001b[39m\n ‚ùØ test/integration/edge-cases.test.ts:147:29\n    145| \n    146|       // Should update to dead_letter status\n    147|       expect(mockDb.update).toHaveBeenCalledWith(filesTable);\n       |                             ^\n    148|       expect(mockDb.set).toHaveBeenCalledWith(\n    149|         expect.objectContaining({\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[4/13]‚éØ\n\n FAIL  test/integration/edge-cases.test.ts > Edge Case Tests > Dead Letter Queue Recovery > should successfully reprocess dead letter files\nTypeError: (0 , getConfig)(...).getForFileManager is not a function\n ‚ùØ getDb src/db.ts:12:32\n     10| export function getDb(): DrizzleClient {\n     11|   if (!dbInstance) {\n     12|     const config = getConfig().getForFileManager();\n       |                                ^\n     13|     dbInstance = getDatabaseConnection(config.DATABASE_URL);\n     14|   }\n ‚ùØ Module.reprocessDeadLetterFile src/operations.ts:1594:14\n ‚ùØ test/integration/edge-cases.test.ts:174:28\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[5/13]‚éØ\n\n FAIL  test/integration/edge-cases.test.ts > Edge Case Tests > Concurrent Upload Handling > should handle concurrent uploads of the same file\nZodError: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"object\",\n    \"received\": \"undefined\",\n    \"path\": [],\n    \"message\": \"Required\"\n  }\n]\n ‚ùØ Object.get error [as error] ../../node_modules/zod/v3/types.js:39:31\n ‚ùØ ZodObject.parse ../../node_modules/zod/v3/types.js:114:22\n ‚ùØ Module.uploadFile src/operations.ts:39:43\n     37| ): Promise<string> {\n     38|   // Validate input against schema\n     39|   const validatedInput = createFileSchema.parse(input);\n       |                                           ^\n     40|   \n     41|   const sanitisedFileName = stripSpecialCharacters(file.name);\n ‚ùØ test/integration/edge-cases.test.ts:202:23\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[6/13]‚éØ\n\n FAIL  test/integration/edge-cases.test.ts > Edge Case Tests > Orphaned File Cleanup > should clean up files stuck in pending_upload\nTypeError: Cannot read properties of undefined (reading 'success')\n ‚ùØ test/integration/edge-cases.test.ts:264:21\n    262|       });\n    263| \n    264|       expect(result.success).toBe(true);\n       |                     ^\n    265|       expect(result.cleanedCount).toBeGreaterThan(0);\n    266|     });\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[7/13]‚éØ\n\n FAIL  test/integration/edge-cases.test.ts > Edge Case Tests > Orphaned File Cleanup > should recover files that exist in storage\nTypeError: Cannot read properties of undefined (reading 'success')\n ‚ùØ test/integration/edge-cases.test.ts:286:21\n    284|       });\n    285| \n    286|       expect(result.success).toBe(true);\n       |                     ^\n    287|       // Should update to pending if file exists\n    288|       expect(mockDb.update).toHaveBeenCalled();\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[8/13]‚éØ\n\n FAIL  test/integration/edge-cases.test.ts > Edge Case Tests > Auto-Recovery for Stuck Files > should recover files stuck in processing\nTypeError: Cannot read properties of undefined (reading 'success')\n ‚ùØ test/integration/edge-cases.test.ts:311:21\n    309|       });\n    310| \n    311|       expect(result.success).toBe(true);\n       |                     ^\n    312|       expect(result.recoveredCount).toBe(1);\n    313|       expect(mockDb.update).toHaveBeenCalledWith(filesTable);\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[9/13]‚éØ\n\n FAIL  test/integration/edge-cases.test.ts > Edge Case Tests > Auto-Recovery for Stuck Files > should move to failed after max recovery attempts\nTypeError: Cannot read properties of undefined (reading 'failedCount')\n ‚ùØ test/integration/edge-cases.test.ts:341:21\n    339|       });\n    340| \n    341|       expect(result.failedCount).toBe(1);\n       |                     ^\n    342|       expect(mockDb.update).toHaveBeenCalledWith(filesTable);\n    343|       expect(mockDb.set).toHaveBeenCalledWith(\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[10/13]‚éØ\n\n FAIL  test/integration/edge-cases.test.ts > Edge Case Tests > Special Character Handling > should handle file names with special characters\nZodError: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"object\",\n    \"received\": \"undefined\",\n    \"path\": [],\n    \"message\": \"Required\"\n  }\n]\n ‚ùØ Object.get error [as error] ../../node_modules/zod/v3/types.js:39:31\n ‚ùØ ZodObject.parse ../../node_modules/zod/v3/types.js:114:22\n ‚ùØ Module.uploadFile src/operations.ts:39:43\n     37| ): Promise<string> {\n     38|   // Validate input against schema\n     39|   const validatedInput = createFileSchema.parse(input);\n       |                                           ^\n     40|   \n     41|   const sanitisedFileName = stripSpecialCharacters(file.name);\n ‚ùØ test/integration/edge-cases.test.ts:373:30\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[11/13]‚éØ\n\n FAIL  test/integration/edge-cases.test.ts > Edge Case Tests > Network Failure Handling > should handle storage service unavailability\nAssertionError: expected \"spy\" to be called with arguments: [ ‚Ä¶(1) ]\u001b[90m\n\nNumber of calls: \u001b[1m0\u001b[22m\n\u001b[39m\n ‚ùØ test/integration/edge-cases.test.ts:425:29\n    423| \n    424|       // Should update status to failed\n    425|       expect(mockDb.update).toHaveBeenCalledWith(filesTable);\n       |                             ^\n    426|       expect(mockDb.set).toHaveBeenCalledWith(\n    427|         expect.objectContaining({\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[12/13]‚éØ\n\n FAIL  test/integration/edge-cases.test.ts > Edge Case Tests > Network Failure Handling > should handle database connection failures gracefully\nAssertionError: expected [Function] to throw error including 'Database connection lost' but got '[\\n  {\\n    \"code\": \"invalid_type\",\\n‚Ä¶'\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- Database connection lost\u001b[39m\n\u001b[31m+ [\u001b[39m\n\u001b[31m+   {\u001b[39m\n\u001b[31m+     \"code\": \"invalid_type\",\u001b[39m\n\u001b[31m+     \"expected\": \"object\",\u001b[39m\n\u001b[31m+     \"received\": \"undefined\",\u001b[39m\n\u001b[31m+     \"path\": [],\u001b[39m\n\u001b[31m+     \"message\": \"Required\"\u001b[39m\n\u001b[31m+   }\u001b[39m\n\u001b[31m+ ]\u001b[39m\n\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[13/13]‚éØ\n\n",
      "output": "\n RUN  v3.2.4 /Users/goran/Projects/kibly/packages/file-manager\n\nstdout | test/integration/edge-cases.test.ts\n[dotenv@17.2.1] injecting env (5) from .env.test -- tip: ‚öôÔ∏è  enable debug logging with { debug: true }\n\nstdout | test/integration/edge-cases.test.ts\nüîß Test environment ready\n\nstdout | test/integration/edge-cases.test.ts > Edge Case Tests > Dead Letter Queue Recovery > should successfully reprocess dead letter files\n[11:26:13] INFO: file-manager:  Reprocessing dead letter file { fileId: \u001b[32m'dead-letter-file'\u001b[39m, tenantId: \u001b[90mundefined\u001b[39m }\n\nstdout | test/integration/edge-cases.test.ts\n‚úÖ Tests completed\n\n ‚ùØ test/integration/edge-cases.test.ts (15 tests | 13 failed) 21ms\n   √ó Edge Case Tests > Corrupted File Handling > should handle zero-byte files 7ms\n     ‚Üí expected \"spy\" to be called with arguments: [ ‚Ä¶(1) ]\u001b[90m\n\nNumber of calls: \u001b[1m0\u001b[22m\n\u001b[39m\n   √ó Edge Case Tests > Corrupted File Handling > should handle partially corrupted PDFs 4ms\n     ‚Üí [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"object\",\n    \"received\": \"undefined\",\n    \"path\": [],\n    \"message\": \"Required\"\n  }\n]\n   √ó Edge Case Tests > Corrupted File Handling > should handle files with wrong MIME type 1ms\n     ‚Üí [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"object\",\n    \"received\": \"undefined\",\n    \"path\": [],\n    \"message\": \"Required\"\n  }\n]\n   √ó Edge Case Tests > Dead Letter Queue Recovery > should move to dead letter after max retries 1ms\n     ‚Üí expected \"spy\" to be called with arguments: [ ‚Ä¶(1) ]\u001b[90m\n\nNumber of calls: \u001b[1m0\u001b[22m\n\u001b[39m\n   √ó Edge Case Tests > Dead Letter Queue Recovery > should successfully reprocess dead letter files 2ms\n     ‚Üí (0 , getConfig)(...).getForFileManager is not a function\n   √ó Edge Case Tests > Concurrent Upload Handling > should handle concurrent uploads of the same file 0ms\n     ‚Üí [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"object\",\n    \"received\": \"undefined\",\n    \"path\": [],\n    \"message\": \"Required\"\n  }\n]\n   ‚úì Edge Case Tests > Concurrent Upload Handling > should handle race condition in status updates 0ms\n   √ó Edge Case Tests > Orphaned File Cleanup > should clean up files stuck in pending_upload 0ms\n     ‚Üí Cannot read properties of undefined (reading 'success')\n   √ó Edge Case Tests > Orphaned File Cleanup > should recover files that exist in storage 0ms\n     ‚Üí Cannot read properties of undefined (reading 'success')\n   √ó Edge Case Tests > Auto-Recovery for Stuck Files > should recover files stuck in processing 0ms\n     ‚Üí Cannot read properties of undefined (reading 'success')\n   √ó Edge Case Tests > Auto-Recovery for Stuck Files > should move to failed after max recovery attempts 0ms\n     ‚Üí Cannot read properties of undefined (reading 'failedCount')\n   √ó Edge Case Tests > Special Character Handling > should handle file names with special characters 0ms\n     ‚Üí [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"object\",\n    \"received\": \"undefined\",\n    \"path\": [],\n    \"message\": \"Required\"\n  }\n]\n   ‚úì Edge Case Tests > Special Character Handling > should sanitize file paths properly 1ms\n   √ó Edge Case Tests > Network Failure Handling > should handle storage service unavailability 0ms\n     ‚Üí expected \"spy\" to be called with arguments: [ ‚Ä¶(1) ]\u001b[90m\n\nNumber of calls: \u001b[1m0\u001b[22m\n\u001b[39m\n   √ó Edge Case Tests > Network Failure Handling > should handle database connection failures gracefully 2ms\n     ‚Üí expected [Function] to throw error including 'Database connection lost' but got '[\\n  {\\n    \"code\": \"invalid_type\",\\n‚Ä¶'\n\n Test Files  1 failed (1)\n      Tests  13 failed | 2 passed (15)\n   Start at  11:26:12\n   Duration  986ms (transform 252ms, setup 28ms, collect 766ms, tests 21ms, environment 0ms, prepare 46ms)\n\n"
    }
  ],
  "invoicesTested": [
    "Adobe",
    "Microsoft",
    "ChatGPT",
    "Xero",
    "Notion",
    "Figma"
  ]
}