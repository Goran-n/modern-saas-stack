# Task ID: 2
# Title: Implement Database Schema and Migrations
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create database tables for WhatsApp verifications, Slack connections, and communication logs with proper indexes and constraints
# Details:
Using Supabase migrations, create tables: `verified_whatsapp_numbers`, `whatsapp_verifications`, `communication_logs`, `slack_connections`, and `slack_user_mappings` as specified in PRD. Use Drizzle ORM for type-safe database access. Implement row-level security (RLS) policies for multi-tenant isolation. Create indexes on frequently queried columns: (tenant_id, phone_number), (tenant_id, created_at), (workspace_id). Set up database triggers for updated_at timestamps. Implement soft delete for audit compliance. Create database functions for atomic verification code validation. Use pgcrypto extension for encrypting Slack bot tokens. Set up automatic cleanup job for expired verification codes (10 minutes TTL).

# Test Strategy:
Test migrations rollback and forward. Verify RLS policies prevent cross-tenant access. Test unique constraints and foreign key relationships. Benchmark query performance with sample data. Test encrypted field storage and retrieval. Verify automatic cleanup of expired codes. Test database triggers functionality.

# Subtasks:
## 1. Initial Supabase Setup and Drizzle Configuration [pending]
### Dependencies: None
### Description: Set up Supabase project, configure environment variables, and initialize Drizzle ORM with proper TypeScript configuration
### Details:
Create new Supabase project and obtain connection strings. Install @supabase/supabase-js (v2.45+) and drizzle-orm with drizzle-kit. Configure drizzle.config.ts with Supabase PostgreSQL connection. Set up environment variables for DATABASE_URL, SUPABASE_URL, and SUPABASE_ANON_KEY. Create base migration structure and test connection. Configure SSL settings for production database connection.

## 2. Create Core Database Tables with Schemas [pending]
### Dependencies: 2.1
### Description: Implement all required tables including verified_whatsapp_numbers, whatsapp_verifications, communication_logs, slack_connections, and slack_user_mappings
### Details:
Create tables using Drizzle schema definitions with proper data types and constraints. Define primary keys, foreign keys, and unique constraints. Add tenant_id to all tables for multi-tenancy. Include created_at, updated_at timestamps, and deleted_at for soft deletes. Set up proper CASCADE rules for foreign key relationships. Ensure all phone numbers use E.164 format validation.

## 3. Implement RLS Policies for Multi-Tenancy [pending]
### Dependencies: 2.2
### Description: Create row-level security policies to ensure tenant isolation and prevent cross-tenant data access
### Details:
Enable RLS on all tables using ALTER TABLE ENABLE ROW LEVEL SECURITY. Create policies for SELECT, INSERT, UPDATE, DELETE operations checking auth.jwt() ->> 'tenant_id'. Implement service role bypass for system operations. Add policies for workspace-level isolation in Slack tables. Test policies with different tenant contexts to ensure complete isolation.

## 4. Set Up Index Optimization [pending]
### Dependencies: 2.2
### Description: Create database indexes on frequently queried columns to optimize query performance
### Details:
Create composite indexes on (tenant_id, phone_number) for whatsapp tables. Add index on (tenant_id, created_at) for time-based queries. Create index on (workspace_id) for Slack tables. Add partial indexes for non-deleted records using WHERE deleted_at IS NULL. Create GIN indexes for JSONB metadata columns. Analyze query plans to validate index usage.

## 5. Implement Database Triggers for Timestamps [pending]
### Dependencies: 2.2
### Description: Create PostgreSQL triggers to automatically manage updated_at timestamps across all tables
### Details:
Create update_updated_at_column() function in PostgreSQL. Add BEFORE UPDATE triggers on all tables to call the function. Ensure triggers work correctly with bulk updates. Add triggers for audit log creation on sensitive operations. Test trigger behavior with concurrent updates. Create trigger for automatic verification code expiry.

## 6. Implement Soft Delete Functionality [pending]
### Dependencies: 2.2, 2.3
### Description: Add soft delete capabilities with proper constraints and query modifications
### Details:
Add deleted_at timestamp column to all tables with default NULL. Create Drizzle query helpers that automatically filter out soft-deleted records. Implement restore functionality for accidentally deleted records. Update RLS policies to respect soft deletes. Create scheduled job to hard delete old soft-deleted records after retention period. Add unique partial indexes excluding deleted records.

## 7. Set Up Encrypted Fields with pgcrypto [pending]
### Dependencies: 2.2
### Description: Implement field-level encryption for sensitive data using PostgreSQL pgcrypto extension
### Details:
Enable pgcrypto extension in Supabase. Create encryption/decryption functions using AES-256. Encrypt sensitive fields: Slack bot tokens, phone numbers in logs, webhook signatures. Store encryption keys in Supabase Vault. Create views that automatically decrypt data for authorized access. Implement key rotation strategy with versioning.

## 8. Create Database Functions for Verification Logic [pending]
### Dependencies: 2.2, 2.7
### Description: Implement PostgreSQL functions for complex verification workflows and business logic
### Details:
Create function to generate secure verification codes with customizable length. Implement check_verification_code() function with rate limiting logic. Create function for automatic code expiry after 10 minutes. Add function to check verification attempts and lock after 5 failures. Create aggregate functions for usage statistics. Implement functions for GDPR data export compilation.

## 9. Configure Automated Cleanup Jobs [pending]
### Dependencies: 2.2, 2.5, 2.6
### Description: Set up pg_cron jobs for data retention, expired verification cleanup, and maintenance tasks
### Details:
Install pg_cron extension in Supabase. Create job to delete expired verification codes older than 24 hours. Set up job to hard delete soft-deleted records after 90 days. Implement communication log cleanup based on retention policy (default 180 days). Create job for database statistics update. Add job for webhook failure retry cleanup. Monitor job execution with logging.

## 10. Create Migration Testing Suite [pending]
### Dependencies: 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9
### Description: Implement comprehensive testing framework for database migrations and schema changes
### Details:
Create test fixtures with sample data for all tables. Implement migration rollback tests using transactions. Test RLS policies with multiple tenant contexts. Verify foreign key constraints and cascade behaviors. Test encrypted field storage and retrieval. Benchmark query performance with realistic data volumes. Create integration tests for all database functions. Test cleanup jobs with time manipulation.

