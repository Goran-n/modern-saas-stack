# Task ID: 3
# Title: Build Twilio WhatsApp Integration Module
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Implement Twilio SDK integration for WhatsApp Business API with phone verification flow and message handling
# Details:
Install twilio SDK (v5.3+) and implement TwilioService class. Configure Twilio webhook URL with ngrok for local development. Implement phone number validation using libphonenumber-js for E.164 formatting. Create verification code generator using crypto.randomInt (6 digits). Implement WhatsAppMessageHandler extending MessageHandler interface. Handle incoming message types: text, document (PDF), image. Validate PDF files using pdf-parse (max 50MB). Store Twilio credentials in environment variables via Doppler. Implement retry logic with exponential backoff for Twilio API calls. Set up Twilio webhook signature validation using X-Twilio-Signature header. Create message templates for verification codes and status updates. Handle WhatsApp Business API rate limits (1000 messages/second).

# Test Strategy:
Mock Twilio client for unit tests. Test E.164 phone formatting with various international formats. Test verification code uniqueness and randomness. Integration test with Twilio test credentials. Test file size validation and PDF detection. Test webhook signature validation with valid/invalid signatures. Test rate limit handling with mock responses.

# Subtasks:
## 1. Install Twilio SDK and create TwilioService class [done]
### Dependencies: None
### Description: Install twilio SDK (v5.3+) via npm and create TwilioService class with constructor for credentials and base configuration
### Details:
Install twilio package and create TwilioService class in packages/communication/src/services/twilio. Include constructor that accepts account SID, auth token, and WhatsApp sender ID. Set up basic client initialization with error handling for missing credentials.

## 2. Configure webhook endpoints with ngrok [pending]
### Dependencies: 3.1
### Description: Set up Twilio webhook configuration for local development using ngrok tunnel
### Details:
Configure ngrok to expose local webhook endpoint at /webhooks/whatsapp. Update Twilio console or use API to set webhook URL. Create webhook handler that logs incoming requests. Document ngrok setup process for team members.

## 3. Implement phone number validation with libphonenumber-js [pending]
### Dependencies: 3.1
### Description: Add phone number validation and E.164 formatting using libphonenumber-js library
### Details:
Install libphonenumber-js and create validatePhoneNumber function. Support international formats with country code detection. Return formatted E.164 number or validation error. Handle edge cases like extensions and special characters.

## 4. Create verification code generation system [pending]
### Dependencies: 3.1
### Description: Build secure 6-digit verification code generator using crypto.randomInt
### Details:
Implement generateVerificationCode function using crypto.randomInt for cryptographically secure random numbers. Ensure codes are exactly 6 digits with leading zeros if needed. Create code storage mechanism with TTL of 10 minutes.

## 5. Implement WhatsAppMessageHandler for different message types [pending]
### Dependencies: 3.1, 3.2
### Description: Create message handler implementation supporting text, document, and image message types
### Details:
Extend abstract MessageHandler interface for WhatsApp. Parse incoming webhook payloads for different message types. Route messages to appropriate handlers based on type. Extract metadata like sender, timestamp, and message ID.

## 6. Add PDF validation and size checking [pending]
### Dependencies: 3.5
### Description: Implement PDF file validation using pdf-parse with 50MB size limit
### Details:
Install pdf-parse library for PDF validation. Check file MIME type and magic bytes for PDF verification. Enforce 50MB maximum file size. Extract PDF metadata like page count and creation date. Handle corrupted or password-protected PDFs gracefully.

## 7. Configure environment variables with Doppler [pending]
### Dependencies: 3.1
### Description: Set up Doppler integration for secure environment variable management
### Details:
Configure Doppler CLI and project setup. Create environment variables for TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_WHATSAPP_NUMBER. Set up different configs for dev, staging, and production. Document Doppler setup process and access controls.

## 8. Implement retry logic with exponential backoff [pending]
### Dependencies: 3.1
### Description: Create robust retry mechanism for Twilio API calls with exponential backoff
### Details:
Implement retry wrapper for Twilio API calls. Use exponential backoff starting at 1 second up to 32 seconds. Retry on network errors and 5xx status codes. Maximum 5 retry attempts. Log retry attempts with @vepler/logger.

## 9. Add webhook signature validation [pending]
### Dependencies: 3.2
### Description: Implement Twilio webhook signature validation for security
### Details:
Create middleware to validate X-Twilio-Signature header. Use Twilio auth token to compute expected signature. Compare signatures in constant time to prevent timing attacks. Return 403 for invalid signatures. Log validation failures for monitoring.

## 10. Create message template system [pending]
### Dependencies: 3.1
### Description: Build template system for WhatsApp message formatting with variable substitution
### Details:
Create message template engine supporting WhatsApp approved templates. Implement variable substitution with {{variable}} syntax. Support multiple languages and template versioning. Validate templates against WhatsApp requirements. Cache compiled templates for performance.

## 11. Implement rate limiting and quota management [pending]
### Dependencies: 3.1, 3.8
### Description: Add rate limiting for WhatsApp API calls respecting Twilio's limits
### Details:
Implement token bucket algorithm for rate limiting. Respect Twilio's per-second and per-day limits. Queue messages when rate limit is reached. Monitor quota usage and alert when approaching limits. Implement graceful degradation when limits are exceeded.

