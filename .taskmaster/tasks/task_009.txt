# Task ID: 9
# Title: Implement Security Hardening and Compliance
# Status: pending
# Dependencies: 7
# Priority: high
# Description: Add comprehensive security measures, GDPR compliance features, and audit capabilities
# Details:
Implement webhook signature verification for both Twilio (HMAC-SHA1) and Slack (HMAC-SHA256). Add request body size limits (10MB) to prevent DoS attacks. Implement IP allowlisting for webhook endpoints using Express middleware. Add GDPR data export functionality for phone numbers and logs. Create data retention policies with automatic cleanup jobs using pg_cron. Implement phone number hashing for logs while maintaining searchability. Add abuse detection using Redis sliding window for verification attempts (max 5 per hour). Create security headers middleware (CSP, HSTS, X-Frame-Options). Implement API key rotation mechanism for external services. Add PII detection in logs using regex patterns. Create compliance report generation (data inventory, access logs). Set up AWS KMS for encryption key management. Implement zero-trust verification for all platform messages.

# Test Strategy:
Penetration test webhook endpoints. Test signature verification with tampered requests. Test rate limiting effectiveness. Verify GDPR export completeness. Test data retention cleanup. Security audit with OWASP guidelines. Test PII detection accuracy. Verify encryption at rest and in transit.

# Subtasks:
## 1. Implement webhook signature verification for Twilio and Slack [pending]
### Dependencies: None
### Description: Create middleware for validating webhook signatures using HMAC-SHA1 for Twilio and HMAC-SHA256 for Slack to ensure request authenticity
### Details:
Implement validateTwilioSignature middleware using X-Twilio-Signature header and HMAC-SHA1. Implement validateSlackSignature using X-Slack-Signature and X-Slack-Request-Timestamp with HMAC-SHA256. Store webhook signing secrets securely in environment variables. Add comprehensive error handling for invalid signatures. Include timing-safe comparison to prevent timing attacks

## 2. Configure request size limiting middleware [pending]
### Dependencies: None
### Description: Implement Express middleware to limit request body sizes to 10MB to prevent DoS attacks and memory exhaustion
### Details:
Use express.json() and express.urlencoded() with limit: '10mb' option. Implement custom middleware for multipart/form-data uploads using multer with fileSize limits. Add specific limits for different endpoints (smaller for webhooks, larger for file uploads). Return 413 Payload Too Large status code for oversized requests. Log attempts to exceed limits for monitoring

## 3. Create IP allowlisting middleware for webhooks [pending]
### Dependencies: None
### Description: Build middleware to restrict webhook endpoints to known IP ranges from Twilio and Slack for additional security
### Details:
Maintain allowlists for Twilio and Slack IP ranges in configuration. Create isAllowedIP middleware that checks X-Forwarded-For and remoteAddress. Support both IPv4 and IPv6 addresses with CIDR notation. Add bypass mechanism for development environment. Implement dynamic reload of IP lists without restart. Log blocked attempts with full request details

## 4. Build GDPR data export functionality [pending]
### Dependencies: 9.2
### Description: Implement system to export all personal data associated with a phone number or user ID in machine-readable format
### Details:
Create /api/gdpr/export endpoint accepting phone number or user ID. Query all tables containing personal data: verified_whatsapp_numbers, communication_logs, slack_user_mappings. Generate comprehensive JSON export including all associated records. Implement authentication and authorization checks. Add rate limiting to prevent abuse. Include metadata about data collection purposes and retention periods

## 5. Implement data retention policy with automated cleanup [pending]
### Dependencies: 9.2
### Description: Create system to automatically delete old data based on configurable retention periods using pg_cron or Node.js scheduled jobs
### Details:
Define retention periods: 90 days for logs, 180 days for verification data. Create cleanup job to run daily at 3 AM UTC using node-cron or pg_cron. Implement soft delete first, then hard delete after grace period. Archive critical audit logs to cold storage before deletion. Send notifications before data deletion. Create restore mechanism for accidentally deleted data within grace period

## 6. Develop phone number hashing system [pending]
### Dependencies: None
### Description: Create secure hashing mechanism for phone numbers in logs while maintaining ability to search and audit
### Details:
Use SHA-256 with per-tenant salt for phone number hashing. Store hash alongside encrypted phone number for searchability. Create indexable hash prefix for efficient lookups. Implement reversible encryption for authorized access using AES-256-GCM. Add audit trail for all phone number access. Create migration to hash existing phone numbers in logs

## 7. Build Redis-based abuse detection system [pending]
### Dependencies: 9.2
### Description: Implement sliding window rate limiting and abuse detection using Redis to prevent spam and attacks
### Details:
Create Redis sliding window counters for: verification attempts per phone (5/hour), webhook calls per IP (100/minute), API calls per tenant (1000/hour). Implement exponential backoff for repeat offenders. Add configurable thresholds per endpoint. Create abuse score calculation based on multiple factors. Implement automatic blocking and unblocking logic. Send alerts for suspected abuse patterns

## 8. Configure comprehensive security headers middleware [pending]
### Dependencies: None
### Description: Add security headers to all HTTP responses to protect against common web vulnerabilities
### Details:
Implement helmet.js with strict configuration. Add Content-Security-Policy with nonce for inline scripts. Set X-Frame-Options to DENY, X-Content-Type-Options to nosniff. Configure HSTS with preload for HTTPS enforcement. Add Referrer-Policy and Permissions-Policy headers. Implement CORS with strict origin validation. Add security.txt file for vulnerability disclosure

## 9. Create API key rotation mechanism [pending]
### Dependencies: 9.1
### Description: Build system for rotating API keys and webhook secrets without downtime
### Details:
Support multiple active keys during rotation period. Create key versioning system with expiration dates. Implement graceful key rotation with overlap period. Add automated rotation reminders and scheduling. Create audit log for all key operations. Build CLI tool for emergency key rotation. Implement key revocation list for compromised keys

## 10. Implement PII detection in application logs [pending]
### Dependencies: 9.6
### Description: Create system to automatically detect and redact personally identifiable information from logs
### Details:
Build regex patterns for detecting phone numbers, emails, names, addresses. Create log interceptor to scan all log outputs before writing. Implement configurable redaction levels (full, partial, hash). Whitelist specific log contexts where PII is allowed. Add detection for credit cards, SSNs, and other sensitive data. Create compliance report showing PII detection effectiveness

## 11. Build compliance report generation system [pending]
### Dependencies: 9.4, 9.5, 9.10
### Description: Create automated reports for security compliance including GDPR, data processing, and audit trails
### Details:
Generate monthly GDPR compliance reports showing data processing activities. Create security audit reports with access logs and permission changes. Build data retention compliance reports showing deletion activities. Implement automated vulnerability scanning integration. Add regulatory requirement tracking and gap analysis. Create executive dashboard for compliance metrics

## 12. Integrate AWS KMS for encryption key management [pending]
### Dependencies: 9.6
### Description: Implement AWS Key Management Service for managing encryption keys for sensitive data
### Details:
Create KMS master key for application encryption. Implement envelope encryption for database fields. Rotate data encryption keys automatically using KMS. Add key usage audit logging to CloudTrail. Implement least-privilege IAM policies for KMS access. Create disaster recovery plan for key loss scenarios. Build local key caching with TTL for performance

## 13. Implement zero-trust verification for internal APIs [pending]
### Dependencies: 9.9
### Description: Add authentication and authorization to all internal API calls between services
### Details:
Implement mTLS for service-to-service communication. Add JWT tokens with short expiration for internal calls. Create service identity verification using certificates. Implement principle of least privilege for service accounts. Add request signing for critical operations. Create service mesh configuration for traffic policies. Monitor and alert on unauthorized access attempts

## 14. Create comprehensive security testing suite [pending]
### Dependencies: 9.1, 9.3, 9.7, 9.8, 9.13
### Description: Build automated security tests covering all implemented security measures
### Details:
Write penetration tests for webhook endpoints using invalid signatures. Create fuzzing tests for input validation vulnerabilities. Test rate limiting effectiveness under load. Verify OWASP Top 10 protections. Add dependency vulnerability scanning with npm audit. Implement automated security regression tests. Create security benchmark tests for performance impact. Build continuous security monitoring dashboard

